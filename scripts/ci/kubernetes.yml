# Develop
docker-develop: &DOCKER
  stage: build
  variables:
    ISTIO_VIRTUAL_SERVICE: ${DOMAIN_DEVELOP}
    ECR: ${ECR_DEVELOP}
    REPLICAS: ${REPLICAS_DEVELOP}
  image: somosphi/node:latest
  before_script:
    - mkdir deployment
  script:
    - cat package.json | grep version |cut -d ":" -f2|sed "s/\"//g"|sed "s/ //g"|cut -d "," -f1 > ./deployment/APP_VERSION
    - npm install
    - node ./scripts/shell/build-deployment.js
    - cp ./Dockerfile ./deployment
  artifacts:
    name: "$CI_JOB_NAME"
    expire_in: 15min
    paths:
      - ./deployment
  only:
    - develop

typescript-develop: &TYPESCRIPT
  stage: build
  image: somosphi/node:latest
  script:
    - npm install
    - npm run build
  artifacts:
    name: "$CI_JOB_NAME"
    expire_in: 15min
    paths:
      - ./release
  only:
    - develop

pushing-develop: &PUSHING
  stage: publish
  image: somosphi/typescript:latest
  variables:
    ECR: ${ECR_DEVELOP}
    AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID_DEV}
    AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY_DEV}
    AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION_DEV}
  script:
    - export APP_VERSION=$(cat ./deployment/APP_VERSION)
    - login=$(/usr/local/bin/aws ecr get-login --no-include-email)
    - $login
    - /usr/local/bin/aws ecr create-repository --repository-name ${DOCKER_REPO}/${PROJECT_NAMESPACE}-${CI_COMMIT_REF_NAME}/${CI_PROJECT_NAME} && status=$?
    - docker build -t ${DOCKER_REPO}/${PROJECT_NAMESPACE}-${CI_COMMIT_REF_NAME}/${CI_PROJECT_NAME} .
    - docker tag ${DOCKER_REPO}/${PROJECT_NAMESPACE}-${CI_COMMIT_REF_NAME}/${CI_PROJECT_NAME} ${ECR}/${DOCKER_REPO}/${PROJECT_NAMESPACE}-${CI_COMMIT_REF_NAME}/${CI_PROJECT_NAME}:${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHORT_SHA}
    - docker push ${ECR}/${DOCKER_REPO}/${PROJECT_NAMESPACE}-${CI_COMMIT_REF_NAME}/${CI_PROJECT_NAME}:${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHORT_SHA}
  dependencies:
    - docker-develop
    - typescript-develop
  only:
    - develop

kubernetes-develop: &KUBERNETES
  stage: deploy
  image: somosphi/docker:latest
  variables:
    CLUSTER_NAME: ${CLUSTER_DEVELOP}
    ISTIO_VIRTUAL_SERVICE: ${DOMAIN_DEVELOP}
    ECR: ${ECR_DEVELOP}
    OIDC_ISSUER: '${OIDC_ISSUER_DEVELOP}'
    OIDC_JWKS_URI: '${OIDC_JWKS_URI_DEVELOP}'
  before_script:
    - apk add --no-cache gettext
    - apk add --no-cache openssh-client
    - apk add  --no-cache git
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git config --global user.name "${GITLAB_USERNAME}"
  script:
    - envsubst <./scripts/kubernetes/deployment.yaml >./${CI_PROJECT_NAME}-deployment.yaml
    - envsubst <./scripts/kubernetes/service.yaml >./${CI_PROJECT_NAME}-service.yaml
    - envsubst <./scripts/kubernetes/virtual-service.yaml >./${CI_PROJECT_NAME}-virtualservice.yaml
    - ssh-keyscan git.4all.com >> ~/.ssh/known_hosts
    - mkdir ./${PROJECT_NAMESPACE}-${CI_COMMIT_REF_NAME}
    - cp -r ./${CI_PROJECT_NAME}-*.yaml ./${PROJECT_NAMESPACE}-${CI_COMMIT_REF_NAME}/
    - git clone ${FLUX_REPO}
    - cd ./flux
    - git checkout ${CI_COMMIT_REF_NAME}
    - cp -r ../${PROJECT_NAMESPACE}-${CI_COMMIT_REF_NAME} ${CLUSTER_NAME}/
    - git add ./${CLUSTER_NAME}/${PROJECT_NAMESPACE}-${CI_COMMIT_REF_NAME}/*.yaml
    - git commit -m "${CI_COMMIT_SHORT_SHA}"
    - git pull
    - git push -u origin ${CI_COMMIT_REF_NAME}
  dependencies:
    - docker-develop
  only:
    - develop

# Master
docker-master:
  <<: *DOCKER
  variables:
    ISTIO_VIRTUAL_SERVICE: ${DOMAIN_MASTER}
    ECR: ${ECR_PRODUCTION}
    REPLICAS: ${REPLICAS_PRODUCTION}
  only:
    - master

typescript-master:
  <<: *TYPESCRIPT
  only:
    - master

pushing-master:
  <<: *PUSHING
  image: somosphi/typescript:latest
  variables:
    ECR: ${ECR_PRODUCTION}
    AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID_PROD}
    AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY_PROD}
    AWS_DEFAULT_REGION: ${AWS_DEFAULT_REGION_PROD}
  dependencies:
    - docker-master
    - typescript-master
  only:
    - master

kubernetes-master:
  <<: *KUBERNETES
  variables:
    CLUSTER_NAME: ${CLUSTER_PRODUCTION}
    ISTIO_VIRTUAL_SERVICE: ${DOMAIN_PRODUCTION}
    ECR: ${ECR_PRODUCTION}
    OIDC_ISSUER: '${OIDC_ISSUER_PRODUCTION}'
    OIDC_JWKS_URI: '${OIDC_JWKS_URI_PRODUCTION}'
  dependencies:
    - docker-master
  only:
    - master

